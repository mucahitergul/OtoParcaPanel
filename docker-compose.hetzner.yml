version: '3.8'

services:
  # PostgreSQL Database - Hetzner Optimized
  postgres:
    image: postgres:15-alpine
    container_name: oto-parca-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: oto_parca_panel
      POSTGRES_USER: oto_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning for Hetzner
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Sadece localhost'tan erişim
    networks:
      - oto-parca-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oto_user -d oto_parca_panel"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          # Hetzner CX21: 4GB RAM için optimize
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Hetzner için optimize edilmiş PostgreSQL ayarları
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=384MB
      -c effective_cache_size=1.5GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c checkpoint_timeout=15min
      -c log_min_duration_statement=1000

  # Redis Cache - Hetzner Optimized
  redis:
    image: redis:7-alpine
    container_name: oto-parca-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Sadece localhost'tan erişim
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - oto-parca-network
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend (NestJS) - Hetzner Optimized
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: oto-parca-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: oto_user
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: oto_parca_panel
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      # WooCommerce Integration
      WOOCOMMERCE_URL: ${WOOCOMMERCE_URL:-}
      WOOCOMMERCE_CONSUMER_KEY: ${WOOCOMMERCE_CONSUMER_KEY:-}
      WOOCOMMERCE_CONSUMER_SECRET: ${WOOCOMMERCE_CONSUMER_SECRET:-}
      # Hetzner optimizations
      NODE_OPTIONS: "--max-old-space-size=1536 --optimize-for-size"
      UV_THREADPOOL_SIZE: 4
    ports:
      - "127.0.0.1:3001:3001"  # Sadece localhost'tan erişim
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - oto-parca-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend (Next.js) - Hetzner Optimized
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NODE_ENV: production
    container_name: oto-parca-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      # Hetzner optimizations
      NODE_OPTIONS: "--max-old-space-size=1536 --optimize-for-size"
    ports:
      - "127.0.0.1:3000:3000"  # Sadece localhost'tan erişim
    networks:
      - oto-parca-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy - Hetzner Optimized
  nginx:
    image: nginx:alpine
    container_name: oto-parca-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./uploads:/var/www/uploads:ro
      # Let's Encrypt için
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/ssl:/etc/ssl:ro
    networks:
      - oto-parca-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring: Prometheus - Hetzner Optimized
  prometheus:
    image: prom/prometheus:latest
    container_name: oto-parca-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"  # Sadece localhost'tan erişim
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - oto-parca-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'  # 7 gün (Hetzner disk tasarrufu)
      - '--storage.tsdb.retention.size=5GB'   # Maksimum 5GB
      - '--web.enable-lifecycle'
      - '--web.external-url=https://${DOMAIN_NAME:-localhost}:9090'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring: Grafana - Hetzner Optimized
  grafana:
    image: grafana/grafana:latest
    container_name: oto-parca-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3002:3000"  # Sadece localhost'tan erişim
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_SERVER_ROOT_URL: "https://${DOMAIN_NAME:-localhost}:3002"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      # Hetzner optimizations
      GF_DATABASE_TYPE: "sqlite3"
      GF_SESSION_PROVIDER: "memory"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - oto-parca-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Management - Hetzner Optimized
  logrotate:
    image: blacklabelops/logrotate
    container_name: oto-parca-logrotate
    restart: unless-stopped
    volumes:
      - ./logs:/logs
      - ./nginx/logs:/nginx-logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      LOGS_DIRECTORIES: "/logs /nginx-logs"
      LOGROTATE_INTERVAL: "daily"
      LOGROTATE_COPIES: "7"
      LOGROTATE_SIZE: "100M"
      LOGROTATE_COMPRESS: "true"
    profiles:
      - utils

# Hetzner için optimize edilmiş volume yapılandırması
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/oto-parca-panel/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/oto-parca-panel/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/oto-parca-panel/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/oto-parca-panel/data/grafana

# Hetzner için optimize edilmiş network yapılandırması
networks:
  oto-parca-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: "oto-parca-br"
      com.docker.network.driver.mtu: 1500
